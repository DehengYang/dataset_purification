diff -Naur /mnt/benchmarks/bugs/Defects4J/Defects4J_Lang_17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java /mnt/benchmarks/bugs/Defects4J/Defects4J_Lang_17/fixed-version/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
--- /mnt/benchmarks/bugs/Defects4J/Defects4J_Lang_17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	2020-03-01 00:07:26.020733674 -0800
+++ /mnt/benchmarks/bugs/Defects4J/Defects4J_Lang_17/fixed-version/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	2020-03-01 00:07:29.436894630 -0800
@@ -80,26 +80,20 @@
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
+                pos+= c.length;
+                continue;
             }
-            else {
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
             }
-            pos++;
         }
     }
 
