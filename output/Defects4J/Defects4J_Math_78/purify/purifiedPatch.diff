--- /mnt/purify/repairDir/Purify_Defects4J_Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java	2020-10-21 13:33:35.794595764 -0400
+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Math_78/purify/purified/org/apache/commons/math/ode/events/EventState.java	2020-10-21 13:33:35.794595764 -0400
@@ -188,6 +188,7 @@
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
+                    if (ga * gb > 0) {
                         // this is a corner case:
                         // - there was an event near ta,
                         // - there is another event between ta and tb
@@ -195,7 +196,12 @@
                         // this implies that the real sign of ga is the same as gb, so we need to slightly
                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain
                         // about bracketing
+                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;
+                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
+                            ta += epsilon;
                             // this should never happen
+                        }
+                    }
                          
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
