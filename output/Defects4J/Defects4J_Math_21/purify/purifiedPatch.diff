--- /mnt/purify/repairDir/Purify_Defects4J_Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	2020-10-21 06:01:32.805907783 -0400
+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Math_21/purify/purified/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	2020-10-21 06:01:32.805907783 -0400
@@ -77,20 +77,27 @@
 
             // find maximal diagonal element
             swap[r] = r;
+            int swapR = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
                 int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
                     swap[r] = i;
+                int isr = index[swapR];
+                if (c[ii][ii] > c[isr][isr]) {
+                    swapR = i;
                 }
             }
 
 
             // swap elements
-            if (swap[r] != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            if (swapR != r) {
+                final int tmpIndex    = index[r];
+                index[r]              = index[swapR];
+                index[swapR]          = tmpIndex;
+                final double[] tmpRow = b[r];
+                b[r]                  = b[swapR];
+                b[swapR]              = tmpRow;
             }
 
             // check diagonal element
