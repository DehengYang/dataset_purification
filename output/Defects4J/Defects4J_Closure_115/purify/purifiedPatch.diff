--- /mnt/purify/repairDir/Purify_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2020-10-23 15:49:56.014935616 -0400
+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Closure_115/purify/purified/com/google/javascript/jscomp/FunctionInjector.java	2020-10-23 15:49:56.014935616 -0400
@@ -695,13 +695,7 @@
     Node block = fnNode.getLastChild();
 
     boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
       Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
@@ -727,9 +721,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
