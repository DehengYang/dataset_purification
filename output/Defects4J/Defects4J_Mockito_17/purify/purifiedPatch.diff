--- /mnt/purify/repairDir/Purify_Defects4J_Mockito_17/src/org/mockito/internal/util/MockUtil.java	2020-10-24 12:02:12.492510114 -0400
+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Mockito_17/purify/purified/org/mockito/internal/util/MockUtil.java	2020-10-24 12:02:12.492510114 -0400
@@ -16,6 +16,7 @@
 import org.mockito.internal.creation.jmock.ClassImposterizer;
 import org.mockito.internal.util.reflection.LenientCopyTool;
 
+import java.io.Serializable;
 
 @SuppressWarnings("unchecked")
 public class MockUtil {
@@ -42,7 +43,11 @@
         Class<?>[] interfaces = settings.getExtraInterfaces();
 
         Class<?>[] ancillaryTypes;
+        if (settings.isSerializable()) {
+            ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);
+        } else {
             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
+        }
 
         Object spiedInstance = settings.getSpiedInstance();
         
--- /mnt/purify/repairDir/Purify_Defects4J_Mockito_17/src/org/mockito/internal/creation/MockSettingsImpl.java	2020-10-24 12:02:12.500510338 -0400
+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Mockito_17/purify/purified/org/mockito/internal/creation/MockSettingsImpl.java	2020-10-24 12:02:12.500510338 -0400
@@ -17,9 +17,11 @@
     private Object spiedInstance;
     private Answer<Object> defaultAnswer;
     private MockName mockName;
+    private boolean serializable;
 
     public MockSettings serializable() {
-        return this.extraInterfaces(java.io.Serializable.class);
+        this.serializable = true;
+        return this;
     }
 
     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {
@@ -71,7 +73,7 @@
     }
 
     public boolean isSerializable() {
-        return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);
+        return serializable;
     }
 
     public void initiateMockName(Class classToMock) {
