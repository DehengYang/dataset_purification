1 bug_id: Math-92
2 src folder:
  name of src folder: java
  number of files: 308
  number of java files: 278
  number of src classes: 319
  number of test classes: 161
3 test (cases):
  failing test cases:
  - org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge
  failing tests:
  - org.apache.commons.math.util.MathUtilsTest
  number of all test cases: 1507
  number of failing test cases: 1
4 time cost of purification:
  coverage on buggy version: 2.0
  coverage on fixed version: 1.0
  purification via coverage: 2.906
  purification via delta debugging: 365.972
  repair actions extraction: 1.45
5 stmts covered by failing cases:
  buggy:
    org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge: 28
  fixed:
    org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge: 58
6 reduced lines:
  by all: 36
  by coverage: 0
  by delta debugging: 36
  covAdd: 49
  covDel: 6
  cov_patch_lines: 55
  delta_patch_lines: 19
  oriAdd: 49
  oriDel: 6
  ori_patch_lines: 55
  purAdd: 16
  purDel: 3
7 reduced chunks:
  by all: 5
  by coverage: 0
  by delta debugging: 5
  cov: 12
  original: 12
  purifiy: 7
8 mutants by delta debugging:
  failAll: 0
  failCompile: 51
  failFail: 9
  passed: 3
  total: 63
9 sibling repair actions:
- 4 5 0.9770623742454728
- 8 9 0.7457831325301205
- 9 14 0.8376068376068376
10 patch:
  original: "--- /mnt/purify/repairDir/Purify_Defects4J_Math_92/src/java/org/apache/commons/math/util/MathUtils.java\t\
    2020-10-22 08:32:39.786373474 -0400\n+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Math_92/purify/patch/org/apache/commons/math/util/MathUtils.java\t\
    2020-10-22 08:32:39.782373358 -0400\n@@ -181,30 +181,43 @@\n         if ((k ==\
    \ 1) || (k == n - 1)) {\n             return n;\n         }\n-        long result\
    \ = Math.round(binomialCoefficientDouble(n, k));\n-        if (result == Long.MAX_VALUE)\
    \ {\n-            throw new ArithmeticException(\n-                \"result too\
    \ large to represent in a long integer\");\n-        }\n         // Use symmetry\
    \ for large k\n+        if (k > n / 2)\n+            return binomialCoefficient(n,\
    \ n - k);\n         \n         // We use the formula\n         // (n choose k)\
    \ = n! / (n-k)! / k!\n         // (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n\
    \         // which could be written\n         // (n choose k) == (n-1 choose k-1)\
    \ * n / k\n+        long result = 1;\n+        if (n <= 61) {\n             //\
    \ For n <= 61, the naive implementation cannot overflow.\n+            for (int\
    \ j = 1, i = n - k + 1; j <= k; i++, j++) {\n+                result = result\
    \ * i / j;\n+            }\n+        } else if (n <= 66) {\n             // For\
    \ n > 61 but n <= 66, the result cannot overflow,\n             // but we must\
    \ take care not to overflow intermediate values.\n+            for (int j = 1,\
    \ i = n - k + 1; j <= k; i++, j++) {\n                 // We know that (result\
    \ * i) is divisible by j,\n                 // but (result * i) may overflow,\
    \ so we split j:\n                 // Filter out the gcd, d, so j/d and i/d are\
    \ integer.\n                 // result is divisible by (j/d) because (j/d)\n \
    \                // is relative prime to (i/d) and is a divisor of\n         \
    \        // result * (i/d).\n+                long d = gcd(i, j);\n+         \
    \       result = (result / (j / d)) * (i / d);\n+            }\n+        } else\
    \ {\n             // For n > 66, a result overflow might occur, so we check\n\
    \             // the multiplication, taking care to not overflow\n           \
    \  // unnecessary.\n+            for (int j = 1, i = n - k + 1; j <= k; i++, j++)\
    \ {\n+                long d = gcd(i, j);\n+                result = mulAndCheck((result\
    \ / (j / d)), (i / d));\n+            }\n+        }\n         return result;\n\
    \     }\n \n@@ -231,9 +244,33 @@\n      * @throws IllegalArgumentException if\
    \ preconditions are not met.\n      */\n     public static double binomialCoefficientDouble(final\
    \ int n, final int k) {\n+        if (n < k) {\n+            throw new IllegalArgumentException(\n\
    +                \"must have n >= k for binomial coefficient (n,k)\");\n+    \
    \    }\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\n\
    +                \"must have n >= 0 for binomial coefficient (n,k)\");\n+    \
    \    }\n+        if ((n == k) || (k == 0)) {\n+            return 1d;\n+     \
    \   }\n+        if ((k == 1) || (k == n - 1)) {\n+            return n;\n+   \
    \     }\n+        if (k > n/2) {\n+            return binomialCoefficientDouble(n,\
    \ n - k);\n+        }\n+        if (n < 67) {\n+            return binomialCoefficient(n,k);\n\
    +        }\n         \n+        double result = 1d;\n+        for (int i = 1;\
    \ i <= k; i++) {\n+             result *= (double)(n - k + i) / (double)i;\n+\
    \        }\n   \n-        return Math.floor(Math.exp(binomialCoefficientLog(n,\
    \ k)) + 0.5);\n+        return Math.floor(result + 0.5);\n     }\n     \n    \
    \ /**\n@@ -274,11 +311,17 @@\n          * For values small enough to do exact\
    \ integer computation,\n          * return the log of the exact value \n     \
    \     */\n+        if (n < 67) {  \n+            return Math.log(binomialCoefficient(n,k));\n\
    +        }\n         \n         /*\n          * Return the log of binomialCoefficientDouble\
    \ for values that will not\n          * overflow binomialCoefficientDouble\n \
    \         */\n+        if (n < 1030) { \n+            return Math.log(binomialCoefficientDouble(n,\
    \ k));\n+        } \n         \n         /*\n          * Sum logs for values that\
    \ could overflow"
  purified: "--- /mnt/purify/repairDir/Purify_Defects4J_Math_92/src/java/org/apache/commons/math/util/MathUtils.java\t\
    2020-10-22 08:39:00.337384369 -0400\n+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Math_92/purify/purified/org/apache/commons/math/util/MathUtils.java\t\
    2020-10-22 08:39:00.337384369 -0400\n@@ -181,11 +181,8 @@\n         if ((k ==\
    \ 1) || (k == n - 1)) {\n             return n;\n         }\n-        long result\
    \ = Math.round(binomialCoefficientDouble(n, k));\n-        if (result == Long.MAX_VALUE)\
    \ {\n             throw new ArithmeticException(\n                 \"result too\
    \ large to represent in a long integer\");\n-        }\n         // Use symmetry\
    \ for large k\n         \n         // We use the formula\n@@ -193,18 +190,34 @@\n\
    \         // (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n         // which could\
    \ be written\n         // (n choose k) == (n-1 choose k-1) * n / k\n+        long\
    \ result = 1;\n+        if (n <= 61) {\n             // For n <= 61, the naive\
    \ implementation cannot overflow.\n+            for (int j = 1, i = n - k + 1;\
    \ j <= k; i++, j++) {\n+                result = result * i / j;\n+          \
    \  }\n+        } else if (n <= 66) {\n             // For n > 61 but n <= 66,\
    \ the result cannot overflow,\n             // but we must take care not to overflow\
    \ intermediate values.\n+            for (int j = 1, i = n - k + 1; j <= k; i++,\
    \ j++) {\n                 // We know that (result * i) is divisible by j,\n \
    \                // but (result * i) may overflow, so we split j:\n          \
    \       // Filter out the gcd, d, so j/d and i/d are integer.\n              \
    \   // result is divisible by (j/d) because (j/d)\n                 // is relative\
    \ prime to (i/d) and is a divisor of\n                 // result * (i/d).\n+ \
    \               long d = gcd(i, j);\n+                result = (result / (j /\
    \ d)) * (i / d);\n+            }\n+        } else {\n             // For n > 66,\
    \ a result overflow might occur, so we check\n             // the multiplication,\
    \ taking care to not overflow\n             // unnecessary.\n+            for\
    \ (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n+                long d = gcd(i,\
    \ j);\n+                result = mulAndCheck((result / (j / d)), (i / d));\n+\
    \            }\n+        }\n         return result;\n     }"
11 repair actions: {}
12 ori_repair_actions:
  biggest_depth: 12
  classes_cnt: '1'
  files_cnt: '1'
  org/apache/commons/math/util/MathUtils:
  - !yamlable/myyaml.Action
    lines:
    - 'UPD VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k));
      @TO@ long result=1; '
    - '---UPD VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k))
      @TO@ result=1 '
    - '------UPD MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@
      Math.log(binomialCoefficientDouble(n,k)) '
    - '---------UPD SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)]
      @TO@ MethodName:log:[binomialCoefficientDouble(n,k)] '
    - '------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public,
      static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n /
      2 '
    - '------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 '
    - '------INS Operator@@> @TO@ InfixExpression@@k > n / 2 '
    - '------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 '
    - '---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 '
    - '---------INS Operator@@/ @TO@ InfixExpression@@n / 2 '
    - '---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 '
    - '---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,n - k) @TO@
      IfStatement@@InfixExpression:k > n / 2 '
    - '------INS MethodInvocation@@binomialCoefficient(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,n
      - k) '
    - '---------INS SimpleName@@MethodName:binomialCoefficient:[n, n - k] @TO@ MethodInvocation@@binomialCoefficient(n,n
      - k) '
    - '------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n,
      n - k] '
    - '------------INS InfixExpression@@n - k @TO@ SimpleName@@MethodName:binomialCoefficient:[n,
      n - k] '
    - '---------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '---------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '---------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
  - !yamlable/myyaml.Action
    lines:
    - 'UPD IfStatement@@InfixExpression:result == Long.MAX_VALUE @TO@ InfixExpression:n
      <= 61 '
    - '---DEL InfixExpression@@result == Long.MAX_VALUE '
    - '------DEL QualifiedName@@Long.MAX_VALUE '
    - '---------DEL SimpleName@@Long '
    - '---------DEL SimpleName@@MAX_VALUE '
    - '---DEL ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result
      too large to represent in a long integer") '
    - '------DEL ClassInstanceCreation@@ArithmeticException["result too large to represent
      in a long integer"] '
    - '---------DEL New@@new '
    - '---------DEL SimpleType@@ArithmeticException '
    - '---------DEL StringLiteral@@"result too large to represent in a long integer" '
    - '---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:result ==
      Long.MAX_VALUE '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 '
    - '------INS Operator@@<= @TO@ InfixExpression@@n <= 61 '
    - '------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 '
    - '---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:result
      == Long.MAX_VALUE '
    - '------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1,
      i=n - k + 1 '
    - '---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 '
    - '------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 '
    - '---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 '
    - '------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n
      - k + 1 '
    - '---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 '
    - '------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 '
    - '---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 '
    - '------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j
      <= k; [i++, j++] '
    - '---------INS SimpleName@@j @TO@ InfixExpression@@j <= k '
    - '---------INS Operator@@<= @TO@ InfixExpression@@j <= k '
    - '---------INS SimpleName@@k @TO@ InfixExpression@@j <= k '
    - '------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j
      <= k; [i++, j++] '
    - '---------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '---------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j
      <= k; [i++, j++] '
    - '---------INS SimpleName@@j @TO@ PostfixExpression@@j++ '
    - '---------INS Operator@@++ @TO@ PostfixExpression@@j++ '
    - '------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result
      * i / j '
    - '------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j '
    - '------------INS Operator@@= @TO@ Assignment@@result=result * i / j '
    - '------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result
      * i / j '
    - '---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result
      * i / j '
    - '------------------MOV SimpleName@@result @TO@ InfixExpression@@result * i '
    - '------------------MOV Operator@@== @TO@ InfixExpression@@result * i '
    - '------------------INS SimpleName@@i @TO@ InfixExpression@@result * i '
    - '---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j '
    - '---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j '
    - '---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:result
      == Long.MAX_VALUE '
    - '------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 '
    - '---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 '
    - '---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 '
    - '---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 '
    - '------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n
      <= 66 '
    - '---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 '
    - '---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 '
    - '------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k
      + 1 '
    - '---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n
      - k + 1 '
    - '------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k +
      1 '
    - '---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '---------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 '
    - '------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 '
    - '---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ InfixExpression@@j <= k '
    - '------------INS Operator@@<= @TO@ InfixExpression@@j <= k '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@j <= k '
    - '---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ PostfixExpression@@j++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@j++ '
    - '---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) '
    - '---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i
      / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result
      / (j / d)) * (i / d) '
    - '---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j
      / d)) * (i / d) '
    - '---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) *
      (i / d) '
    - '---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result
      / (j / d)) * (i / d) '
    - '------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result
      / (j / d)) * (i / d) '
    - '---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result
      / (j / d)) '
    - '------------------------INS SimpleName@@result @TO@ InfixExpression@@result
      / (j / d) '
    - '------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j /
      d) '
    - '------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result
      / (j / d) '
    - '---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j
      / d) '
    - '------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d '
    - '------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d '
    - '------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d '
    - '------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d))
      * (i / d) '
    - '------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result
      / (j / d)) * (i / d) '
    - '---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i
      / d) '
    - '------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d '
    - '------------------------INS Operator@@/ @TO@ InfixExpression@@i / d '
    - '------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d '
    - '------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n
      <= 66 '
    - '---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 '
    - '---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 '
    - '------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k
      + 1 '
    - '---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n
      - k + 1 '
    - '------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k +
      1 '
    - '---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '---------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 '
    - '------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 '
    - '---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ InfixExpression@@j <= k '
    - '------------INS Operator@@<= @TO@ InfixExpression@@j <= k '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@j <= k '
    - '---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ PostfixExpression@@j++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@j++ '
    - '---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) '
    - '---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j
      / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d))
      @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i
      / d)) '
    - '---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result
      / (j / d)),(i / d)) '
    - '---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result
      / (j / d)),(i / d)) '
    - '---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d))
      @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) '
    - '------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)),
      (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) '
    - '---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result
      / (j / d)), (i / d)] '
    - '------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result
      / (j / d)) '
    - '---------------------------INS SimpleName@@result @TO@ InfixExpression@@result
      / (j / d) '
    - '---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j
      / d) '
    - '---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result
      / (j / d) '
    - '------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j
      / d) '
    - '---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j
      / d '
    - '---------------------------------INS Operator@@/ @TO@ InfixExpression@@j /
      d '
    - '---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j
      / d '
    - '---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result
      / (j / d)), (i / d)] '
    - '------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i
      / d) '
    - '---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d '
    - '---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d '
    - '---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d '
  - !yamlable/myyaml.Action
    lines:
    - 'DEL ReturnStatement@@MethodInvocation:Math.floor(Math.exp(binomialCoefficientLog(n,k))
      + 0.5) '
    - '---DEL MethodInvocation@@Math.floor(Math.exp(binomialCoefficientLog(n,k)) +
      0.5) '
    - '------DEL SimpleName@@Name:Math '
    - '------DEL SimpleName@@MethodName:floor:[Math.exp(binomialCoefficientLog(n,k))
      + 0.5] '
    - '---------DEL InfixExpression@@Math.exp(binomialCoefficientLog(n,k)) + 0.5 '
    - '------------DEL MethodInvocation@@Math.exp(binomialCoefficientLog(n,k)) '
    - '---------------DEL SimpleName@@MethodName:exp:[binomialCoefficientLog(n,k)] '
    - '------------------DEL MethodInvocation@@binomialCoefficientLog(n,k) '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:n < k @TO@ MethodDeclaration@@public, static,
      @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@n < k @TO@ IfStatement@@InfixExpression:n < k '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n < k '
    - '------INS Operator@@< @TO@ InfixExpression@@n < k '
    - '------INS SimpleName@@k @TO@ InfixExpression@@n < k '
    - '---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must
      have n >= k for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n
      < k '
    - '------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= k
      for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new
      IllegalArgumentException("must have n >= k for binomial coefficient (n,k)") '
    - '---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must
      have n >= k for binomial coefficient (n,k)"] '
    - '---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must
      have n >= k for binomial coefficient (n,k)"] '
    - '---------INS StringLiteral@@"must have n >= k for binomial coefficient (n,k)"
      @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= k for binomial
      coefficient (n,k)"] '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:n < 0 @TO@ MethodDeclaration@@public, static,
      @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@n < 0 @TO@ IfStatement@@InfixExpression:n < 0 '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n < 0 '
    - '------INS Operator@@< @TO@ InfixExpression@@n < 0 '
    - '------INS NumberLiteral@@0 @TO@ InfixExpression@@n < 0 '
    - '---INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("must
      have n >= 0 for binomial coefficient (n,k)") @TO@ IfStatement@@InfixExpression:n
      < 0 '
    - '------INS ClassInstanceCreation@@IllegalArgumentException["must have n >= 0
      for binomial coefficient (n,k)"] @TO@ ThrowStatement@@ClassInstanceCreation:new
      IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)") '
    - '---------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["must
      have n >= 0 for binomial coefficient (n,k)"] '
    - '---------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["must
      have n >= 0 for binomial coefficient (n,k)"] '
    - '---------INS StringLiteral@@"must have n >= 0 for binomial coefficient (n,k)"
      @TO@ ClassInstanceCreation@@IllegalArgumentException["must have n >= 0 for binomial
      coefficient (n,k)"] '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:(n == k) || (k == 0) @TO@ MethodDeclaration@@public,
      static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@(n == k) || (k == 0) @TO@ IfStatement@@InfixExpression:(n
      == k) || (k == 0) '
    - '------INS ParenthesizedExpression@@(n == k) @TO@ InfixExpression@@(n == k)
      || (k == 0) '
    - '---------INS InfixExpression@@n == k @TO@ ParenthesizedExpression@@(n == k) '
    - '------------INS SimpleName@@n @TO@ InfixExpression@@n == k '
    - '------------INS Operator@@== @TO@ InfixExpression@@n == k '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@n == k '
    - '------INS Operator@@|| @TO@ InfixExpression@@(n == k) || (k == 0) '
    - '------INS ParenthesizedExpression@@(k == 0) @TO@ InfixExpression@@(n == k)
      || (k == 0) '
    - '---------INS InfixExpression@@k == 0 @TO@ ParenthesizedExpression@@(k == 0) '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@k == 0 '
    - '------------INS Operator@@== @TO@ InfixExpression@@k == 0 '
    - '------------INS NumberLiteral@@0 @TO@ InfixExpression@@k == 0 '
    - '---INS ReturnStatement@@NumberLiteral:1d @TO@ IfStatement@@InfixExpression:(n
      == k) || (k == 0) '
    - '------INS NumberLiteral@@1d @TO@ ReturnStatement@@NumberLiteral:1d '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:(k == 1) || (k == n - 1) @TO@ MethodDeclaration@@public,
      static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@(k == 1) || (k == n - 1) @TO@ IfStatement@@InfixExpression:(k
      == 1) || (k == n - 1) '
    - '------INS ParenthesizedExpression@@(k == 1) @TO@ InfixExpression@@(k == 1)
      || (k == n - 1) '
    - '---------INS InfixExpression@@k == 1 @TO@ ParenthesizedExpression@@(k == 1) '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@k == 1 '
    - '------------INS Operator@@== @TO@ InfixExpression@@k == 1 '
    - '------------INS NumberLiteral@@1 @TO@ InfixExpression@@k == 1 '
    - '------INS Operator@@|| @TO@ InfixExpression@@(k == 1) || (k == n - 1) '
    - '------INS ParenthesizedExpression@@(k == n - 1) @TO@ InfixExpression@@(k ==
      1) || (k == n - 1) '
    - '---------INS InfixExpression@@k == n - 1 @TO@ ParenthesizedExpression@@(k ==
      n - 1) '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@k == n - 1 '
    - '------------INS Operator@@== @TO@ InfixExpression@@k == n - 1 '
    - '------------INS InfixExpression@@n - 1 @TO@ InfixExpression@@k == n - 1 '
    - '---------------INS SimpleName@@n @TO@ InfixExpression@@n - 1 '
    - '---------------INS Operator@@- @TO@ InfixExpression@@n - 1 '
    - '---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - 1 '
    - '---INS ReturnStatement@@SimpleName:n @TO@ IfStatement@@InfixExpression:(k ==
      1) || (k == n - 1) '
    - '------INS SimpleName@@n @TO@ ReturnStatement@@SimpleName:n '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:k > n / 2 @TO@ MethodDeclaration@@public,
      static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@k > n / 2 @TO@ IfStatement@@InfixExpression:k > n /
      2 '
    - '------INS SimpleName@@k @TO@ InfixExpression@@k > n / 2 '
    - '------INS Operator@@> @TO@ InfixExpression@@k > n / 2 '
    - '------INS InfixExpression@@n / 2 @TO@ InfixExpression@@k > n / 2 '
    - '---------INS SimpleName@@n @TO@ InfixExpression@@n / 2 '
    - '---------INS Operator@@/ @TO@ InfixExpression@@n / 2 '
    - '---------INS NumberLiteral@@2 @TO@ InfixExpression@@n / 2 '
    - '---INS ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n - k)
      @TO@ IfStatement@@InfixExpression:k > n / 2 '
    - '------INS MethodInvocation@@binomialCoefficientDouble(n,n - k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficientDouble(n,n
      - k) '
    - '---------MOV SimpleName@@Name:Math @TO@ MethodInvocation@@binomialCoefficientDouble(n,n
      - k) '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static,
      @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n < 67 '
    - '------INS Operator@@< @TO@ InfixExpression@@n < 67 '
    - '------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 '
    - '---INS ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) @TO@ IfStatement@@InfixExpression:n
      < 67 '
    - '------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ ReturnStatement@@MethodInvocation:binomialCoefficient(n,k) '
    - '---------MOV SimpleName@@MethodName:binomialCoefficientLog:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) '
  - !yamlable/myyaml.Action
    lines:
    - 'INS VariableDeclarationStatement@@double result=1d; @TO@ MethodDeclaration@@public,
      static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS PrimitiveType@@double @TO@ VariableDeclarationStatement@@double result=1d; '
    - '---INS VariableDeclarationFragment@@result=1d @TO@ VariableDeclarationStatement@@double
      result=1d; '
    - '------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=1d '
    - '------INS NumberLiteral@@1d @TO@ VariableDeclarationFragment@@result=1d '
  - !yamlable/myyaml.Action
    lines:
    - 'INS ForStatement@@[int i=1];i <= k; [i++] @TO@ MethodDeclaration@@public, static,
      @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS VariableDeclarationExpression@@int i=1 @TO@ ForStatement@@[int i=1];i
      <= k; [i++] '
    - '------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=1 '
    - '------INS VariableDeclarationFragment@@i=1 @TO@ VariableDeclarationExpression@@int
      i=1 '
    - '---------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=1 '
    - '---------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@i=1 '
    - '---INS InfixExpression@@i <= k @TO@ ForStatement@@[int i=1];i <= k; [i++] '
    - '------INS SimpleName@@i @TO@ InfixExpression@@i <= k '
    - '------INS Operator@@<= @TO@ InfixExpression@@i <= k '
    - '------INS SimpleName@@k @TO@ InfixExpression@@i <= k '
    - '---INS PostfixExpression@@i++ @TO@ ForStatement@@[int i=1];i <= k; [i++] '
    - '------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '---INS ExpressionStatement@@Assignment:result*=(double)(n - k + i) / (double)i
      @TO@ ForStatement@@[int i=1];i <= k; [i++] '
    - '------INS Assignment@@result*=(double)(n - k + i) / (double)i @TO@ ExpressionStatement@@Assignment:result*=(double)(n
      - k + i) / (double)i '
    - '---------INS SimpleName@@result @TO@ Assignment@@result*=(double)(n - k + i)
      / (double)i '
    - '---------INS Operator@@*= @TO@ Assignment@@result*=(double)(n - k + i) / (double)i '
    - '---------INS InfixExpression@@(double)(n - k + i) / (double)i @TO@ Assignment@@result*=(double)(n
      - k + i) / (double)i '
    - '------------INS CastExpression@@(double)(n - k + i) @TO@ InfixExpression@@(double)(n
      - k + i) / (double)i '
    - '---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)(n -
      k + i) '
    - '---------------INS ParenthesizedExpression@@(n - k + i) @TO@ CastExpression@@(double)(n
      - k + i) '
    - '------------------INS InfixExpression@@n - k + i @TO@ ParenthesizedExpression@@(n
      - k + i) '
    - '---------------------MOV Operator@@+ @TO@ InfixExpression@@n - k + i '
    - '---------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k
      + i '
    - '------------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '------------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '------------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '---------------------INS SimpleName@@i @TO@ InfixExpression@@n - k + i '
    - '------------INS Operator@@/ @TO@ InfixExpression@@(double)(n - k + i) / (double)i '
    - '------------INS CastExpression@@(double)i @TO@ InfixExpression@@(double)(n
      - k + i) / (double)i '
    - '---------------INS PrimitiveType@@double @TO@ CastExpression@@(double)i '
    - '---------------INS SimpleName@@i @TO@ CastExpression@@(double)i '
  - !yamlable/myyaml.Action
    lines:
    - 'INS ReturnStatement@@MethodInvocation:Math.floor(result + 0.5) @TO@ MethodDeclaration@@public,
      static, @@double, MethodName:binomialCoefficientDouble, @@Argus:int+n+int+k+ '
    - '---INS MethodInvocation@@Math.floor(result + 0.5) @TO@ ReturnStatement@@MethodInvocation:Math.floor(result
      + 0.5) '
    - '------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.floor(result +
      0.5) '
    - '------INS SimpleName@@MethodName:floor:[result + 0.5] @TO@ MethodInvocation@@Math.floor(result
      + 0.5) '
    - '---------INS InfixExpression@@result + 0.5 @TO@ SimpleName@@MethodName:floor:[result
      + 0.5] '
    - '------------MOV NumberLiteral@@0.5 @TO@ InfixExpression@@result + 0.5 '
    - '------------INS SimpleName@@result @TO@ InfixExpression@@result + 0.5 '
    - '------------INS Operator@@+ @TO@ InfixExpression@@result + 0.5 '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:n < 67 @TO@ MethodDeclaration@@public, static,
      @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@n < 67 @TO@ IfStatement@@InfixExpression:n < 67 '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n < 67 '
    - '------INS Operator@@< @TO@ InfixExpression@@n < 67 '
    - '------INS NumberLiteral@@67 @TO@ InfixExpression@@n < 67 '
    - '---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k))
      @TO@ IfStatement@@InfixExpression:n < 67 '
    - '------INS MethodInvocation@@Math.log(binomialCoefficient(n,k)) @TO@ ReturnStatement@@MethodInvocation:Math.log(binomialCoefficient(n,k)) '
    - '---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) '
    - '---------INS SimpleName@@MethodName:log:[binomialCoefficient(n,k)] @TO@ MethodInvocation@@Math.log(binomialCoefficient(n,k)) '
    - '------------INS MethodInvocation@@binomialCoefficient(n,k) @TO@ SimpleName@@MethodName:log:[binomialCoefficient(n,k)] '
    - '---------------INS SimpleName@@MethodName:binomialCoefficient:[n, k] @TO@ MethodInvocation@@binomialCoefficient(n,k) '
    - '------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:binomialCoefficient:[n,
      k] '
    - '------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:binomialCoefficient:[n,
      k] '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:n < 1030 @TO@ MethodDeclaration@@public, static,
      @@double, MethodName:binomialCoefficientLog, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@n < 1030 @TO@ IfStatement@@InfixExpression:n < 1030 '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n < 1030 '
    - '------INS Operator@@< @TO@ InfixExpression@@n < 1030 '
    - '------INS NumberLiteral@@1030 @TO@ InfixExpression@@n < 1030 '
    - '---INS ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k))
      @TO@ IfStatement@@InfixExpression:n < 1030 '
    - '------MOV MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) @TO@
      ReturnStatement@@MethodInvocation:Math.log(binomialCoefficientDouble(n,k)) '
  repair_actions_cnt: 15
13 purify_repair_actions:
  biggest_depth: 12
  classes_cnt: '1'
  files_cnt: '1'
  org/apache/commons/math/util/MathUtils:
  - !yamlable/myyaml.Action
    lines:
    - 'DEL VariableDeclarationStatement@@long result=Math.round(binomialCoefficientDouble(n,k)); '
    - '---DEL VariableDeclarationFragment@@result=Math.round(binomialCoefficientDouble(n,k)) '
    - '------DEL MethodInvocation@@Math.round(binomialCoefficientDouble(n,k)) '
    - '---------DEL SimpleName@@Name:Math '
    - '---------DEL SimpleName@@MethodName:round:[binomialCoefficientDouble(n,k)] '
    - '------------DEL MethodInvocation@@binomialCoefficientDouble(n,k) '
    - '---------------DEL SimpleName@@MethodName:binomialCoefficientDouble:[n, k] '
    - '------------------DEL SimpleName@@n '
    - '------------------DEL SimpleName@@k '
  - !yamlable/myyaml.Action
    lines:
    - 'DEL IfStatement@@InfixExpression:result == Long.MAX_VALUE '
    - '---DEL InfixExpression@@result == Long.MAX_VALUE '
    - '------DEL QualifiedName@@Long.MAX_VALUE '
    - '---------DEL SimpleName@@Long '
    - '---------DEL SimpleName@@MAX_VALUE '
  - !yamlable/myyaml.Action
    lines:
    - 'MOV ThrowStatement@@ClassInstanceCreation:new ArithmeticException("result too
      large to represent in a long integer") @TO@ MethodDeclaration@@public, static,
      @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ '
  - !yamlable/myyaml.Action
    lines:
    - 'INS VariableDeclarationStatement@@long result=1; @TO@ MethodDeclaration@@public,
      static, @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ '
    - '---MOV PrimitiveType@@long @TO@ VariableDeclarationStatement@@long result=1; '
    - '---INS VariableDeclarationFragment@@result=1 @TO@ VariableDeclarationStatement@@long
      result=1; '
    - '------MOV SimpleName@@result @TO@ VariableDeclarationFragment@@result=1 '
    - '------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@result=1 '
  - !yamlable/myyaml.Action
    lines:
    - 'INS IfStatement@@InfixExpression:n <= 61 @TO@ MethodDeclaration@@public, static,
      @@long, MethodName:binomialCoefficient, @@Argus:int+n+int+k+ '
    - '---INS InfixExpression@@n <= 61 @TO@ IfStatement@@InfixExpression:n <= 61 '
    - '------INS SimpleName@@n @TO@ InfixExpression@@n <= 61 '
    - '------INS Operator@@<= @TO@ InfixExpression@@n <= 61 '
    - '------INS NumberLiteral@@61 @TO@ InfixExpression@@n <= 61 '
    - '---INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n
      <= 61 '
    - '------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int j=1,
      i=n - k + 1 '
    - '---------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 '
    - '------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 '
    - '---------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k + 1 '
    - '------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n
      - k + 1 '
    - '---------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k + 1 '
    - '------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '---------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 '
    - '---------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 '
    - '------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k + 1];j
      <= k; [i++, j++] '
    - '---------INS SimpleName@@j @TO@ InfixExpression@@j <= k '
    - '---------INS Operator@@<= @TO@ InfixExpression@@j <= k '
    - '---------INS SimpleName@@k @TO@ InfixExpression@@j <= k '
    - '------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j
      <= k; [i++, j++] '
    - '---------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '---------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k + 1];j
      <= k; [i++, j++] '
    - '---------INS SimpleName@@j @TO@ PostfixExpression@@j++ '
    - '---------INS Operator@@++ @TO@ PostfixExpression@@j++ '
    - '------INS ExpressionStatement@@Assignment:result=result * i / j @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '---------INS Assignment@@result=result * i / j @TO@ ExpressionStatement@@Assignment:result=result
      * i / j '
    - '------------INS SimpleName@@result @TO@ Assignment@@result=result * i / j '
    - '------------INS Operator@@= @TO@ Assignment@@result=result * i / j '
    - '------------INS InfixExpression@@result * i / j @TO@ Assignment@@result=result
      * i / j '
    - '---------------INS InfixExpression@@result * i @TO@ InfixExpression@@result
      * i / j '
    - '------------------INS SimpleName@@result @TO@ InfixExpression@@result * i '
    - '------------------INS Operator@@* @TO@ InfixExpression@@result * i '
    - '------------------INS SimpleName@@i @TO@ InfixExpression@@result * i '
    - '---------------INS Operator@@/ @TO@ InfixExpression@@result * i / j '
    - '---------------INS SimpleName@@j @TO@ InfixExpression@@result * i / j '
    - '---INS IfStatement@@InfixExpression:n <= 66 @TO@ IfStatement@@InfixExpression:n
      <= 61 '
    - '------INS InfixExpression@@n <= 66 @TO@ IfStatement@@InfixExpression:n <= 66 '
    - '---------INS SimpleName@@n @TO@ InfixExpression@@n <= 66 '
    - '---------INS Operator@@<= @TO@ InfixExpression@@n <= 66 '
    - '---------INS NumberLiteral@@66 @TO@ InfixExpression@@n <= 66 '
    - '------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n
      <= 66 '
    - '---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 '
    - '---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 '
    - '------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k
      + 1 '
    - '---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n
      - k + 1 '
    - '------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k +
      1 '
    - '---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '---------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 '
    - '------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 '
    - '---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ InfixExpression@@j <= k '
    - '------------INS Operator@@<= @TO@ InfixExpression@@j <= k '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@j <= k '
    - '---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ PostfixExpression@@j++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@j++ '
    - '---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) '
    - '---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------INS ExpressionStatement@@Assignment:result=(result / (j / d)) * (i
      / d) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS Assignment@@result=(result / (j / d)) * (i / d) @TO@ ExpressionStatement@@Assignment:result=(result
      / (j / d)) * (i / d) '
    - '---------------INS SimpleName@@result @TO@ Assignment@@result=(result / (j
      / d)) * (i / d) '
    - '---------------INS Operator@@= @TO@ Assignment@@result=(result / (j / d)) *
      (i / d) '
    - '---------------INS InfixExpression@@(result / (j / d)) * (i / d) @TO@ Assignment@@result=(result
      / (j / d)) * (i / d) '
    - '------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ InfixExpression@@(result
      / (j / d)) * (i / d) '
    - '---------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result
      / (j / d)) '
    - '------------------------MOV SimpleName@@result @TO@ InfixExpression@@result
      / (j / d) '
    - '------------------------MOV Operator@@== @TO@ InfixExpression@@result / (j
      / d) '
    - '------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result
      / (j / d) '
    - '---------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j
      / d) '
    - '------------------------------INS SimpleName@@j @TO@ InfixExpression@@j / d '
    - '------------------------------INS Operator@@/ @TO@ InfixExpression@@j / d '
    - '------------------------------INS SimpleName@@d @TO@ InfixExpression@@j / d '
    - '------------------INS Operator@@* @TO@ InfixExpression@@(result / (j / d))
      * (i / d) '
    - '------------------INS ParenthesizedExpression@@(i / d) @TO@ InfixExpression@@(result
      / (j / d)) * (i / d) '
    - '---------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i
      / d) '
    - '------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d '
    - '------------------------INS Operator@@/ @TO@ InfixExpression@@i / d '
    - '------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d '
    - '------INS ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] @TO@ IfStatement@@InfixExpression:n
      <= 66 '
    - '---------INS VariableDeclarationExpression@@int j=1, i=n - k + 1 @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '------------INS VariableDeclarationFragment@@j=1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@j @TO@ VariableDeclarationFragment@@j=1 '
    - '---------------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@j=1 '
    - '------------INS VariableDeclarationFragment@@i=n - k + 1 @TO@ VariableDeclarationExpression@@int
      j=1, i=n - k + 1 '
    - '---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=n - k
      + 1 '
    - '---------------INS InfixExpression@@n - k + 1 @TO@ VariableDeclarationFragment@@i=n
      - k + 1 '
    - '------------------INS InfixExpression@@n - k @TO@ InfixExpression@@n - k +
      1 '
    - '---------------------INS SimpleName@@n @TO@ InfixExpression@@n - k '
    - '---------------------INS Operator@@- @TO@ InfixExpression@@n - k '
    - '---------------------INS SimpleName@@k @TO@ InfixExpression@@n - k '
    - '------------------INS Operator@@+ @TO@ InfixExpression@@n - k + 1 '
    - '------------------INS NumberLiteral@@1 @TO@ InfixExpression@@n - k + 1 '
    - '---------INS InfixExpression@@j <= k @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ InfixExpression@@j <= k '
    - '------------INS Operator@@<= @TO@ InfixExpression@@j <= k '
    - '------------INS SimpleName@@k @TO@ InfixExpression@@j <= k '
    - '---------INS PostfixExpression@@i++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@i @TO@ PostfixExpression@@i++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@i++ '
    - '---------INS PostfixExpression@@j++ @TO@ ForStatement@@[int j=1, i=n - k +
      1];j <= k; [i++, j++] '
    - '------------INS SimpleName@@j @TO@ PostfixExpression@@j++ '
    - '------------INS Operator@@++ @TO@ PostfixExpression@@j++ '
    - '---------INS VariableDeclarationStatement@@long d=gcd(i,j); @TO@ ForStatement@@[int
      j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '------------INS VariableDeclarationFragment@@d=gcd(i,j) @TO@ VariableDeclarationStatement@@long
      d=gcd(i,j); '
    - '---------------INS SimpleName@@d @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '---------------INS MethodInvocation@@gcd(i,j) @TO@ VariableDeclarationFragment@@d=gcd(i,j) '
    - '------------------INS SimpleName@@MethodName:gcd:[i, j] @TO@ MethodInvocation@@gcd(i,j) '
    - '---------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------------------INS SimpleName@@j @TO@ SimpleName@@MethodName:gcd:[i,
      j] '
    - '---------INS ExpressionStatement@@Assignment:result=mulAndCheck((result / (j
      / d)),(i / d)) @TO@ ForStatement@@[int j=1, i=n - k + 1];j <= k; [i++, j++] '
    - '------------INS Assignment@@result=mulAndCheck((result / (j / d)),(i / d))
      @TO@ ExpressionStatement@@Assignment:result=mulAndCheck((result / (j / d)),(i
      / d)) '
    - '---------------INS SimpleName@@result @TO@ Assignment@@result=mulAndCheck((result
      / (j / d)),(i / d)) '
    - '---------------INS Operator@@= @TO@ Assignment@@result=mulAndCheck((result
      / (j / d)),(i / d)) '
    - '---------------INS MethodInvocation@@mulAndCheck((result / (j / d)),(i / d))
      @TO@ Assignment@@result=mulAndCheck((result / (j / d)),(i / d)) '
    - '------------------INS SimpleName@@MethodName:mulAndCheck:[(result / (j / d)),
      (i / d)] @TO@ MethodInvocation@@mulAndCheck((result / (j / d)),(i / d)) '
    - '---------------------INS ParenthesizedExpression@@(result / (j / d)) @TO@ SimpleName@@MethodName:mulAndCheck:[(result
      / (j / d)), (i / d)] '
    - '------------------------INS InfixExpression@@result / (j / d) @TO@ ParenthesizedExpression@@(result
      / (j / d)) '
    - '---------------------------INS SimpleName@@result @TO@ InfixExpression@@result
      / (j / d) '
    - '---------------------------INS Operator@@/ @TO@ InfixExpression@@result / (j
      / d) '
    - '---------------------------INS ParenthesizedExpression@@(j / d) @TO@ InfixExpression@@result
      / (j / d) '
    - '------------------------------INS InfixExpression@@j / d @TO@ ParenthesizedExpression@@(j
      / d) '
    - '---------------------------------INS SimpleName@@j @TO@ InfixExpression@@j
      / d '
    - '---------------------------------INS Operator@@/ @TO@ InfixExpression@@j /
      d '
    - '---------------------------------INS SimpleName@@d @TO@ InfixExpression@@j
      / d '
    - '---------------------INS ParenthesizedExpression@@(i / d) @TO@ SimpleName@@MethodName:mulAndCheck:[(result
      / (j / d)), (i / d)] '
    - '------------------------INS InfixExpression@@i / d @TO@ ParenthesizedExpression@@(i
      / d) '
    - '---------------------------INS SimpleName@@i @TO@ InfixExpression@@i / d '
    - '---------------------------INS Operator@@/ @TO@ InfixExpression@@i / d '
    - '---------------------------INS SimpleName@@d @TO@ InfixExpression@@i / d '
  repair_actions_cnt: 5
