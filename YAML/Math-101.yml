1 bug_id: Math-101
2 src folder:
  name of src folder: java
  number of files: 244
  number of java files: 223
  number of src classes: 236
  number of test classes: 139
3 test (cases):
  failing test cases:
  - org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter
  - org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter
  failing tests:
  - org.apache.commons.math.complex.ComplexFormatTest
  - org.apache.commons.math.complex.FrenchComplexFormatTest
  number of all test cases: 1177
  number of failing test cases: 2
4 time cost of purification:
  coverage on buggy version: 2.0
  coverage on fixed version: 8.0
  purification via coverage: 1.017
  purification via delta debugging: 77.13
  repair actions extraction: 1.064
5 stmts covered by failing cases:
  buggy:
    org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter: 63
    org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter: 63
  fixed:
    org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter: 66
    org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter: 66
6 reduced lines:
  by all: 1
  by coverage: 0
  by delta debugging: 1
  covAdd: 2
  covDel: 1
  cov_patch_lines: 3
  delta_patch_lines: 2
  oriAdd: 2
  oriDel: 1
  ori_patch_lines: 3
  purAdd: 1
  purDel: 1
7 reduced chunks:
  by all: 0
  by coverage: 0
  by delta debugging: 0
  cov: 1
  original: 1
  purifiy: 1
8 mutants by delta debugging:
  failAll: 0
  failCompile: 6
  failFail: 0
  passed: 1
  total: 7
9 sibling repair actions: []
10 patch:
  original: "--- /mnt/purify/repairDir/Purify_Defects4J_Math_101/src/java/org/apache/commons/math/complex/ComplexFormat.java\t\
    2020-10-21 14:15:41.203606532 -0400\n+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Math_101/purify/patch/org/apache/commons/math/complex/ComplexFormat.java\t\
    2020-10-21 14:15:41.203606532 -0400\n@@ -374,7 +374,8 @@\n         int n = getImaginaryCharacter().length();\n\
    \         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n\
    -        if (\n+        if ((startIndex >= source.length()) ||\n+            (endIndex\
    \ > source.length()) ||\n             source.substring(startIndex, endIndex).compareTo(\n\
    \             getImaginaryCharacter()) != 0) {\n             // set index back\
    \ to initial, error index should be the start index"
  purified: "--- /mnt/purify/repairDir/Purify_Defects4J_Math_101/src/java/org/apache/commons/math/complex/ComplexFormat.java\t\
    2020-10-21 14:17:08.854139048 -0400\n+++ /mnt/purify/buggylocs/Defects4J/Defects4J_Math_101/purify/purified/org/apache/commons/math/complex/ComplexFormat.java\t\
    2020-10-21 14:17:08.854139048 -0400\n@@ -374,7 +374,7 @@\n         int n = getImaginaryCharacter().length();\n\
    \         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n\
    -        if (\n+        if ((startIndex >= source.length()) ||\n             source.substring(startIndex,\
    \ endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n      \
    \       // set index back to initial, error index should be the start index"
11 repair actions: {}
12 ori_repair_actions:
  biggest_depth: 6
  classes_cnt: '1'
  files_cnt: '1'
  org/apache/commons/math/complex/ComplexFormat:
  - !yamlable/myyaml.Action
    lines:
    - 'UPD IfStatement@@InfixExpression:source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 @TO@ InfixExpression:(startIndex >= source.length()) || (endIndex > source.length())
      || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '---INS InfixExpression@@(startIndex >= source.length()) || (endIndex > source.length())
      || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 @TO@ IfStatement@@InfixExpression:source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '------INS ParenthesizedExpression@@(startIndex >= source.length()) @TO@ InfixExpression@@(startIndex
      >= source.length()) || (endIndex > source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '---------INS InfixExpression@@startIndex >= source.length() @TO@ ParenthesizedExpression@@(startIndex
      >= source.length()) '
    - '------------INS SimpleName@@startIndex @TO@ InfixExpression@@startIndex >=
      source.length() '
    - '------------INS Operator@@>= @TO@ InfixExpression@@startIndex >= source.length() '
    - '------------INS MethodInvocation@@source.length() @TO@ InfixExpression@@startIndex
      >= source.length() '
    - '---------------INS SimpleName@@Name:source @TO@ MethodInvocation@@source.length() '
    - '---------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@source.length() '
    - '------MOV InfixExpression@@source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 @TO@ InfixExpression@@(startIndex >= source.length()) || (endIndex > source.length())
      || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '------INS Operator@@|| @TO@ InfixExpression@@(startIndex >= source.length())
      || (endIndex > source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '------INS ParenthesizedExpression@@(endIndex > source.length()) @TO@ InfixExpression@@(startIndex
      >= source.length()) || (endIndex > source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '---------INS InfixExpression@@endIndex > source.length() @TO@ ParenthesizedExpression@@(endIndex
      > source.length()) '
    - '------------INS SimpleName@@endIndex @TO@ InfixExpression@@endIndex > source.length() '
    - '------------INS Operator@@> @TO@ InfixExpression@@endIndex > source.length() '
    - '------------INS MethodInvocation@@source.length() @TO@ InfixExpression@@endIndex
      > source.length() '
    - '---------------INS SimpleName@@Name:source @TO@ MethodInvocation@@source.length() '
    - '---------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@source.length() '
  repair_actions_cnt: 1
13 purify_repair_actions:
  biggest_depth: 6
  classes_cnt: '1'
  files_cnt: '1'
  org/apache/commons/math/complex/ComplexFormat:
  - !yamlable/myyaml.Action
    lines:
    - 'UPD IfStatement@@InfixExpression:source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 @TO@ InfixExpression:(startIndex >= source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '---INS InfixExpression@@(startIndex >= source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 @TO@ IfStatement@@InfixExpression:source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '------INS ParenthesizedExpression@@(startIndex >= source.length()) @TO@ InfixExpression@@(startIndex
      >= source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '---------INS InfixExpression@@startIndex >= source.length() @TO@ ParenthesizedExpression@@(startIndex
      >= source.length()) '
    - '------------INS SimpleName@@startIndex @TO@ InfixExpression@@startIndex >=
      source.length() '
    - '------------INS Operator@@>= @TO@ InfixExpression@@startIndex >= source.length() '
    - '------------INS MethodInvocation@@source.length() @TO@ InfixExpression@@startIndex
      >= source.length() '
    - '---------------INS SimpleName@@Name:source @TO@ MethodInvocation@@source.length() '
    - '---------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@source.length() '
    - '------MOV InfixExpression@@source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 @TO@ InfixExpression@@(startIndex >= source.length()) || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
    - '------INS Operator@@|| @TO@ InfixExpression@@(startIndex >= source.length())
      || source.substring(startIndex,endIndex).compareTo(getImaginaryCharacter())
      != 0 '
  repair_actions_cnt: 1
